---
swagger: "2.0"
info:
  description: "This is a book store server provided for users in order to buy books. Users can register into the \
  \ store, can login and logout and each user owns a Cart in which they can put their books in order to buy them later. \
  \ The store provides a book inventory with information about their authors too, and there are also events where \
  \ books are presented for promotional purpose. "
  version: "1.0.0"
  title: "Simple Bookstore"
  contact:
    email: "matteo.pozzi0397@gmail.com"
  license:
    name: "Apache-2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0.html"
basePath: "/"
tags:
  - name: "book"
    description: "Available book"
  - name: "genre"
    description: "Literary genre"
  - name: "theme"
    description: "Literary theme"
  - name: "author"
    description: "Author of a book"
  - name: "event"
    description: "Event to present a book"
  - name: "cart"
    description: "Access to the cart"
  - name: "user"
    description: "Operations about user"
schemes:
  - "https"
paths:
  /books:
    get:
      tags:
        - "book"
      summary: "Books available in the inventory"
      description: "List of books available in the inventory"
      operationId: "booksGET"
      produces:
        - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Pagination offset. Default is 0."
          required: false
          type: "integer"
        - name: "limit"
          in: "query"
          description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
          required: false
          type: "integer"
        - name: "author"
          in: "query"
          description: "Filter list of books by author.\
          \ Working example: 12"
          required: false
          type: "integer"
        - name: "genre"
          in: "query"
          description: "Filter list of books about the same genre.\
          \ Working example: Fantasy"
          required: false
          type: "string"
        - name: "theme"
          in: "query"
          description: "Filter list of books which treat the same theme.\
          Working example: Killer Hounting"
          required: false
          type: "string"
      responses:
        200:
          description: "A collection of Books"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Unexpected error"
      x-swagger-router-controller: "Book"
  /books/best-sellers:
    get:
      tags:
        - "book"
      summary: "Find best-sellers books"
      description: "Returns all books which are best-sellers"
      operationId: "bookBestSellersGET"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Unexpected error"
      x-swagger-router-controller: "Book"
  /books/our-favourites:
    get:
      tags:
        - "book"
      summary: "Find our favourites books"
      description: "Returns all books which are our favourites"
      operationId: "bookFavouritesGET"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Unexpected error"
      x-swagger-router-controller: "Book"
  /books/{bookId}:
    get:
      tags:
        - "book"
      summary: "Find book by ID"
      description: "Returns a book"
      operationId: "getBookById"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of book to return.\
          \ Working example: 9780743477154"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"
  /books/{bookId}/reviews:
    get:
      tags:
        - "book"
      summary: "Find reviews of a book"
      description: "Returns all reviews of the book with id bookId"
      operationId: "bookReviewsGET"
      produces:
        - "applications/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of the book to find reviews about.\
          \ Working example: 9780439358064"
          required: true
          type: integer
          format: int64
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Review"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Reviews not found"
      x-swagger-router-controller: "Book"
  /books/{bookId}/similar:
    get:
      tags:
        - "book"
      summary: "Find books similar to bookId"
      description: "Returns a list of books"
      operationId: "getSimilarBooks"
      produces:
        - "application/json"
      parameters:
        - name: "bookId"
          in: "path"
          description: "ID of book to find similar.\
          \ Working example: 9780439358064"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Book"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Book not found"
      x-swagger-router-controller: "Book"
  /books/genres:
    get:
      tags:
        - "genre"
      summary: "Literary genres of books"
      description: "List of literary genres the books belong to"
      operationId: "genresGET"
      produces:
        - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Pagination offset. Default is 0."
          required: false
          type: "integer"
        - name: "limit"
          in: "query"
          description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
          required: false
          type: "integer"
      responses:
        200:
          description: "A collection of Genres"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Genre"
        404:
          description: "Unexpected error"
      x-swagger-router-controller: "Genre"
  /books/themes:
    get:
      tags:
        - "theme"
      summary: "Themes treated by books"
      description: "List of themes the books treat"
      operationId: "themesGET"
      produces:
        - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Pagination offset. Default is 0."
          required: false
          type: "integer"
        - name: "limit"
          in: "query"
          description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
          required: false
          type: "integer"
      responses:
        200:
          description: "A collection of Themes"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Theme"
        404:
          description: "Unexpected error"
      x-swagger-router-controller: "Theme"
  /user/login:
    post:
      tags:
        - "user"
      summary: "Login"
      description: "Login with a form"
      operationId: "userLoginPOST"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "username"
          in: "formData"
          description: "Username of a registered user to log in.\
          \ Working example: naani"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "Password of the user registered with the provided username.\
          \ Working example: michiamoGio"
          required: true
          type: "string"
          format: "password"
      responses:
        200:
          description: "Login successful"
          schema:
            $ref: "#/definitions/User"
        401:
          description: "Authentication Failed"
        409:
          description: "Already logged in"
      x-swagger-router-controller: "User"
  /user/register:
    post:
      tags:
        - "user"
      summary: "Register"
      description: "Register into the store"
      operationId: "userRegisterPOST"
      consumes:
        - "application/x-www-form-urlencoded"
      produces:
        - "application/json"
      parameters:
        - name: "email"
          in: "formData"
          description: "An e-mail for a new user.\
          \ Must be an e-mail not already used by anybody else"
          required: true
          type: "string"
          format: "email"
        - name: "username"
          in: "formData"
          description: "A username for a new user.\
          \ Must be a username not already used by anybody else"
          required: true
          type: "string"
        - name: "password"
          in: "formData"
          description: "A password for a new user.\
          \ No characters or complexity constraints for the password"
          required: true
          type: "string"
          format: "password"
      responses:
        201:
          description: "Registration successful"
        409:
          description: "Registration failed due to duplicate"
      x-swagger-router-controller: "User"
  /user/logout:
    post:
      tags:
        - "user"
      summary: "Logout"
      description: "Logout from the store"
      operationId: "userLogoutPOST"
      responses:
        200:
          description: "Logout successful"
        409:
          description: "Not logged in"
      x-swagger-router-controller: "User"
  /cart:
    get:
      tags:
        - "cart"
      summary: "View the content of the cart"
      description: "View the list of books in the cart and total price"
      operationId: "userCartGET"
      produces:
        - "application/json"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Cart"
        401:
          description: "authentication needed"
      x-swagger-router-controller: "Cart"
  /cart/items:
    post:
      tags:
        - "cart"
      summary: "Insert a book into the cart"
      operationId: "cartBookPOST"
      consumes:
        - "application/json"
      produces:
        - "application/json"
      parameters:
        - name: "book"
          in: "body"
          description: "A book to insert into the cart.\
          \ Must not be already present into the user cart"
          required: true
          schema:
            $ref: "#/definitions/Book"
      responses:
        201:
          description: "Book inserted into cart"
        400:
          description: "Book not available"
        401:
          description: "Not logged in"
        409:
          description: "Conflict with book in database"
      x-swagger-router-controller: "Cart"
    put:
      tags:
        - "cart"
      summary: "Empty the cart"
      description: "Replace the content of the cart with an empty content"
      operationId: "emptyCartPUT"
      responses:
        204:
          description: "Successful operation"
        401:
          description: "Unauthorized"
      x-swagger-router-controller: "Cart"
  /cart/items/{itemID}:
    delete:
      tags:
        - "cart"
      summary: "Delete an item from the cart"
      description: "Delete the item itemId from the cart"
      operationId: "cartBookDELETE"
      consumes:
        - "application/json"
      parameters:
        - name: "itemID"
          in: "path"
          required: true
          description: "ID of the item to remove.\
          \ Must be present into the cart.
          \ Working example for user \"naani\": 9780439358064"
          type: integer
          format: int64
      responses:
        204:
          description: "Item removed"
        400:
          description: "Item wasn't in cart"
        401:
          description: "Unauthorized"
      x-swagger-router-controller: "Cart"
  /authors:
    get:
      tags:
        - "author"
      summary: "Authors who wrote a book available in the store"
      description: "List of authors of books available in the inventory"
      operationId: "authorsGET"
      produces:
        - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Pagination offset. Default is 0."
          required: false
          type: "integer"
        - name: "limit"
          in: "query"
          description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
          required: false
          type: "integer"
        - name: "book"
          in: "query"
          description: "Filter authors who wrote the given book.\
          \ Working example: 9780439358064"
          required: false
          type: "integer"
      responses:
        200:
          description: "A collection of Authors"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Author"
        404:
          description: "Unexpected error"
      x-swagger-router-controller: "Author"
  /authors/{authorId}:
    get:
      tags:
        - "author"
      summary: "Find author by ID"
      description: "Returns an author"
      operationId: "getAuthorById"
      produces:
        - "application/json"
      parameters:
        - name: "authorId"
          in: "path"
          description: "ID of author to return.\
          \ Working example: 12"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/Author"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Author not found"
      x-swagger-router-controller: "Author"
  /events:
    get:
      tags:
        - "event"
      summary: "Events organized by the store"
      description: "List of events organized by the store"
      operationId: "eventsGET"
      produces:
        - "application/json"
      parameters:
        - name: "offset"
          in: "query"
          description: "Pagination offset. Default is 0."
          required: false
          type: "integer"
        - name: "limit"
          in: "query"
          description: "Maximum number of items per page. Default is 20 and cannot exceed\
          \ 500."
          required: false
          type: "integer"
        - name: "book"
          in: "query"
          description: "Filter events where given book is presented.\
          \ Working example: 9780743477154"
          required: false
          type: "integer"
        - name: "author"
          in: "query"
          description: "Filter events presented by an author.\
          \ Working example: 11"
          required: false
          type: "integer"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Unexpected error"
      x-swagger-router-controller: "Event"
  /events/this-month:
    get:
      tags:
        - "event"
      summary: "Events in this month"
      description: "Returns events scheduled in this month"
      operationId: "eventsThisMonthGET"
      produces:
        - "application/json"
      responses:
        200:
          description: "Successful operation"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/Event"
        400:
          description: "Unexpected error"
      x-swagger-router-controller: "Event"
  /events/{eventId}:
    get:
      tags:
        - "event"
      summary: "Find event by ID"
      description: "Returns an event"
      operationId: "getEventById"
      produces:
        - "application/json"
      parameters:
        - name: "eventId"
          in: "path"
          description: "ID of event to return.\
          \ Working example: 1"
          required: true
          type: "integer"
          format: "int64"
      responses:
        200:
          description: "Successful operation"
          schema:
            $ref: "#/definitions/Event"
        400:
          description: "Invalid ID supplied"
        404:
          description: "Event not found"
      x-swagger-router-controller: "Event"
definitions:
  User:
    type: "object"
    required:
      - "username"
      - "email"
      - "password"
    properties:
      user_id:
        type: "integer"
      username:
        type: "string"
      email:
        type: "string"
        format: "email"
      password:
        type: "string"
        format: "password"
    title: "User"
    description: "A user"
    example:
      user_id: 1
      username: "naani"
      email: "giovanni@gmail.com"
      password: "michiamoGio"
  Cart:
    type: "object"
    properties:
      total:
        $ref: "#/definitions/Amount"
      books:
        type: "array"
        items:
          $ref: "#/definitions/Book"
    title: "Cart"
    description: "Order for books"
    example:
      total:
        currency: "eur"
        value: 25.00
      books:
        - code: "9780743477154"
          title: "Postmortem"
          authors:
            - author_id: 11
              name: "Patricia Cornwell"
              biography: "Cornwell began work on her first novel in 1984, about a male detective named Joe Constable\
                  \ and met Dr. Marcella Farinelli Fierro, a medical examiner in Richmond, and subsequent inspiration\
                   \for the..."
          description: "Four women with nothing in common, united only in death. Four brutalized victims of a brilliant\
               \ monster - a \"Mr. Nobody\", moving undetected through a paralyzed city, leaving behind a gruesome trail of..."
          publisher: "Pocket Books, December 30th 2003"
          binding: "Hardcover - 350 pages"
          series: "Kay Scarpetta #1"
          genre: "Crime"
          theme: "Killer Hounting"
          price:
            value: 25.00
            currency: "eur"
          status: "available"
  Book:
    type: "object"
    required:
      - "price"
      - "title"
      - "authors"
    properties:
      code:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      authors:
        type: "array"
        uniqueItems: true
        items:
          $ref: "#/definitions/Author"
        maxItems: 4
        minItems: 1
      description:
        type: "string"
      publisher:
        type: "string"
      binding:
        type: "string"
      series:
        type: "string"
      genre:
        $ref: "#/definitions/Genre"
      theme:
        $ref: "#/definitions/Theme"
      price:
        $ref: "#/definitions/Amount"
      status:
        type: "string"
        description: "book availability in the inventory"
        enum:
          - "available"
          - "out of stock"
    title: "Book"
    description: "A book for sale in the store"
    example:
      code: "9780743477154"
      title: "Postmortem"
      authors:
        - author_id: 11
          name: "Patricia Cornwell"
          biography: "Cornwell began work on her first novel in 1984, about a male detective named Joe Constable\
          \ and met Dr. Marcella Farinelli Fierro, a medical examiner in Richmond, and subsequent inspiration\
           \for the..."
      description: "Four women with nothing in common, united only in death. Four brutalized victims of a brilliant\
       \ monster - a \"Mr. Nobody\", moving undetected through a paralyzed city, leaving behind a gruesome trail of..."
      publisher: "Pocket Books, December 30th 2003"
      binding: "Hardcover - 350 pages"
      series: "Kay Scarpetta #1"
      genre: "Crime"
      theme: "Killer Hounting"
      price:
        value: 25.00
        currency: "eur"
      status: "available"
  Review:
    type: "object"
    required:
      - "username"
      - "book_id"
      - "rate"
    properties:
      username:
        type: "string"
      book_id:
        type: "integer"
        format: "int64"
      date:
        type: "string"
        format: "date"
      rate:
        type: "integer"
        minimum: 1
        maximum: 5
      comment:
        type: "string"
        maxLength: 500
    title: "Review"
    description: "Review of a book in the store"
    example:
      username: "naani"
      book_id: "9780439358064"
      date: "2019-05-30"
      rate: 4
      comment: "nice book"
  Author:
    type: "object"
    required:
      - "name"
    properties:
      author_id:
        type: "integer"
        format: "int64"
      name:
        type: "string"
      biography:
        type: "string"
    title: "Author"
    description: "An author who wrote a book in the store"
    example:
      author_id: 11
      name: "Patricia Cornwell"
      biography: "Cornwell began work on her first novel in 1984, about a male detective named Joe Constable\
      \ and met Dr. Marcella Farinelli Fierro, a medical examiner in Richmond, and subsequent inspiration
      \for the..."
  Genre:
    type: "string"
    description: "A genre of a book"
    enum:
      - "Fantasy"
      - "Science fiction"
      - "Adventure"
      - "Action"
      - "Biography"
      - "Autobiography"
      - "Thriller"
      - "Romance"
      - "Fiction"
      - "Horror"
      - "Poetry"
      - "Drama"
      - "Historical fiction"
      - "Fairytale"
      - "Scientific paper"
      - "Crime"
    example: "Crime"
  Theme:
    type: "string"
    description: "A theme treated by a book"
    enum:
      - "War"
      - "Love"
      - "Death"
      - "Exile"
      - "Travel"
      - "Friendship"
      - "Family"
      - "Immortality"
      - "Chaos"
      - "Coming of age"
      - "Survival"
      - "Self-deception"
      - "Courage"
      - "Good vs Evil"
      - "Corruption"
      - "Racism"
      - "Fear of failure"
      - "Betrayal"
      - "Killer Hounting"
    example: "Good vs Evil"
  Event:
    type: "object"
    required:
      - "book"
      - "date"
      - "place"
    properties:
      event_id:
        type: "integer"
        format: "int64"
      title:
        type: "string"
      description:
        type: "string"
      date:
        type: "string"
        format: "date-time"
      place:
        type: "string"
      book:
        $ref: "#/definitions/Book"
    title: "Event"
    description: "An event in which a book will be presented"
    example:
      id: 1
      title: "Crime and summer"
      description: "Reading of the book postmortem"
      date: "2019-12-07 15:00:00+01"
      place: "Milan via pascoli 5"
      book:
        code: "9780743477154"
        title: "Postmortem"
        authors:
          - author_id: 11
            name: "Patricia Cornwell"
            biography: "Cornwell began work on her first novel in 1984, about a male detective named Joe Constable\
            \ and met Dr. Marcella Farinelli Fierro, a medical examiner in Richmond, and subsequent inspiration\
            \for the..."
        description: "Four women with nothing in common, united only in death. Four brutalized victims of a brilliant\
        \ monster - a \"Mr. Nobody\", moving undetected through a paralyzed city, leaving behind a gruesome trail of..."
        publisher: "Pocket Books, December 30th 2003"
        binding: "Hardcover - 350 pages"
        series: "Kay Scarpetta #1"
        genre: "Crime"
        theme: "Killer Hounting"
        price:
          value: 25.00
          currency: "eur"
        status: "available"
  Amount:
    type: "object"
    required:
      - "currency"
      - "value"
    properties:
      value:
        type: "number"
        format: "double"
        minimum: 0.01
        maximum: 1000000000000000
      currency:
        $ref: "#/definitions/Currency"
    description: "Price\n"
    example:
      currency: "eur"
      value: 11
  Currency:
    type: "string"
    pattern: "^[A-Z]{3,3}$"
    description: "some description\n"
    example: "eur"
externalDocs:
  description: "Find out more about Swagger"
  url: "http://swagger.io"
